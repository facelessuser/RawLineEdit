{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RawLineEdit \ue157 Overview \ue157 View and edit line endings in Sublime Text. RawLineEdit displays line endings very clearly and allows changing the line endings per line (something sublime text doesn't allow out of the box).","title":"About RawLineEdit"},{"location":"#rawlineedit","text":"","title":"RawLineEdit"},{"location":"#overview","text":"View and edit line endings in Sublime Text. RawLineEdit displays line endings very clearly and allows changing the line endings per line (something sublime text doesn't allow out of the box).","title":"Overview"},{"location":"contributing/","text":"Contributing & Support \ue157 Overview \ue157 Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->RawLineEdit->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Feel free to use a virtual environment if you are concerned about installing any of the Python packages. Running Validation Tests \ue157 Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 with the plugins listed below: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->RawLineEdit->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Feel free to use a virtual environment if you are concerned about installing any of the Python packages.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 with the plugins listed below: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation \ue157 Package Control \ue157 The recommended way to install RawLineEdit is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing RawLineEdit ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Git Cloning \ue157 Warning This is not the recommended way to install RawLineEdit for the casual user as it requires the user to know which branch to install, know how to use git, and will not get automatically updated. If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork. Quit Sublime Text. Open a terminal: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/RawLineEdit.git RawLineEdit Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install RawLineEdit is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing RawLineEdit ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#git-cloning","text":"Warning This is not the recommended way to install RawLineEdit for the casual user as it requires the user to know which branch to install, know how to use git, and will not get automatically updated. If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork. Quit Sublime Text. Open a terminal: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/RawLineEdit.git RawLineEdit Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License \ue157 Raw Line Edit is released under the MIT license. Copyright \u00a9 2013 - 2017 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"Raw Line Edit is released under the MIT license. Copyright \u00a9 2013 - 2017 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage/","text":"User Guide \ue157 General Usage \ue157 Toggle the current view to a \"RawLineEdit\" view via the command palette command Raw Line Edit: Toggle Line Edit Mode . To simply view the raw line endings in a output panel, call the command Raw Line Edit: View Line Endings . Using the Enter key you can change a line ending to Windows style, to Linux/Unix style with Shift \uff0b Enter , or even macOS 9 with Ctrl \uff0b Enter . Select multiple lines to change more than one line. Settings \ue157 RawLineEdit has a few settings that can tweak the behavior and look of the plugin. operate_on_unsaved_buffers \ue157 Allows RawLineEdit to operate on views that haven't been saved to disk. // Operate on sublime unsaved view buffer // Instead of reading the file from disk, // The file will be read directly from the buffer // In these cases the line endings will be normalized, // but you can edit them and save them back to disk. // Not sure how useful this is. \"operate_on_unsaved_buffers\" : false use_sub_notify \ue157 Enables sending messages through the SubNotify plugin. // Use subnotify if available \"use_sub_notify\" : true , Create Key Bindings \ue157 To enable raw line edit/view mode via a keybinding you can bind the following commands: toggle_raw_line_edit : a command for create a view where you can view and modify line endings. popup_raw_line_edit : creates an output panel with a read only view of the line endings.","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#general-usage","text":"Toggle the current view to a \"RawLineEdit\" view via the command palette command Raw Line Edit: Toggle Line Edit Mode . To simply view the raw line endings in a output panel, call the command Raw Line Edit: View Line Endings . Using the Enter key you can change a line ending to Windows style, to Linux/Unix style with Shift \uff0b Enter , or even macOS 9 with Ctrl \uff0b Enter . Select multiple lines to change more than one line.","title":"General Usage"},{"location":"usage/#settings","text":"RawLineEdit has a few settings that can tweak the behavior and look of the plugin.","title":"Settings"},{"location":"usage/#operate_on_unsaved_buffers","text":"Allows RawLineEdit to operate on views that haven't been saved to disk. // Operate on sublime unsaved view buffer // Instead of reading the file from disk, // The file will be read directly from the buffer // In these cases the line endings will be normalized, // but you can edit them and save them back to disk. // Not sure how useful this is. \"operate_on_unsaved_buffers\" : false","title":"operate_on_unsaved_buffers"},{"location":"usage/#use_sub_notify","text":"Enables sending messages through the SubNotify plugin. // Use subnotify if available \"use_sub_notify\" : true ,","title":"use_sub_notify"},{"location":"usage/#create-key-bindings","text":"To enable raw line edit/view mode via a keybinding you can bind the following commands: toggle_raw_line_edit : a command for create a view where you can view and modify line endings. popup_raw_line_edit : creates an output panel with a read only view of the line endings.","title":"Create Key Bindings"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"}]}